<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xsi:schemaLocation="http://www.springframework.org/schema/beans 
        					http://www.springframework.org/schema/beans/spring-beans.xsd 
        					http://www.springframework.org/schema/aop 
        					http://www.springframework.org/schema/aop/spring-aop.xsd">
<!-- 设置目标类 -->
	<bean id="UserServiceId" class="aop_by_aspectJ_XML.UserServiceImpl"></bean>
<!-- 设置切面类 -->
	<bean id="myAspectId" class="aop_by_aspectJ_XML.MyAspect"></bean>
	<!-- AOP切面编程
		<aop:aspect ref="">  ref：切面类的引用(id)
		<aop:pointcut expression="" id=""/>  声明一个切入点，所有都可以使用
				expression：AspectJ表达式
				id：自定义切入点的名称
	 -->
	<aop:config>
		<aop:aspect ref="myAspectId">
			<aop:pointcut expression="execution(* aop_by_aspectJ_XML.UserServiceImpl.*(..))" id="myPointCut"/>
			<!-- 前置通知
			<aop:before method="myBefore" pointcut-ref="myPointCut"/>
					method：通知名，即切面类中的方法名
					pointcut-ref：切入点的引用
					poingcut：AspectJ表达式，该表达式只能够当前通知使用，可以和前一个属性二选一
				  通知方法的格式：public void myBefore(JoinPoint joinPoint){}
				  		参数一：org.aspectj.lang.JoinPoint;：用来描述目标方法，可以获得方法名等信息
				 <aop:before method="myBefore" pointcut-ref="myPointCut"/>
			 -->
			<!-- 后置通知
				<aop:after-returning method="" pointcut-ref="" returning=""/>
					returning：通知方法的第二个参数名，是目标方法的返回值
				通知方法格式：public void myAfter(JoinPoint joinPoint,Object ret){}
				
			 <aop:after-returning method="myAfter" pointcut-ref="myPointCut" returning="ret"/>
			 -->
			 <!-- 环绕通知 
			 	<aop:around method="" pointcut-ref=""/>
			 	通知方法格式：public Object myAround(ProceedingJoinPoint point) throws Throwable{}
			 		参数：import org.aspectj.lang.ProceedingJoinPoint;
			 		抛出异常
			 	要求在通知方法内必须手动执行目标方法，调用point.proceed()来执行，并且返回执行结果
			 <aop:around method="myAround" pointcut-ref="myPointCut"/>
			 -->
			 <!-- 抛出异常 
			 	<aop:after-throwing method="myThrowing" pointcut-ref="myPointCut" throwing="e"/>
			 		throwing：通知方法的第二个参数名称
			 	通知方法格式：public void myThrowing(JoinPoint joinPoint,Throwable e){}
			 			
			 <aop:after-throwing method="myThrowing" pointcut-ref="myPointCut" throwing="e"/>
			 -->
			 <!-- 最终通知 -->
			 <aop:after method="after" pointcut-ref="myPointCut"/>
		</aop:aspect>
	</aop:config>

</beans>